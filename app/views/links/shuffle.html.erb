<script type="text/javascript">

$(document).ready(main);

function main()
{
  var url = $("#link").text();

  if (url.match(/^(http:\/\/.*)?\/categories\/(\d+)\/links\/shuffle/) || url.match(/^(http:\/\/.*)?\/shuffle\/(\d+)/)) {
    // redirect to another shuffle, preserving timer
    if (RegExp.$2 == "<%= @link.category.id %>") return;
    if (!url.match(/timer=\d+/))
      url = url + "?timer=" + gup("timer");
    window.location.replace(url);
  } else if (url.match(/^http:\/\/(www.)?youtube.com/)) {
    // embed a youtube video

    $("#iframe").html('<div id="player"></div>');
    $("iframe").hide();

    var tag = document.createElement('script');
    tag.src = "http://www.youtube.com/player_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    //$('iframe').attr('src', "http://www.youtube.com/embed/"+videoId+"?autoplay=1");
  } else if (url.match(/^(javascript|j):.*/)) {
    // eval a javascript
    eval(url.slice(url.indexOf(":")+1));
  } else if (url.match(/^http:\/\//)) {
    // normal url
    $('iframe').attr('src', url);
  } else if (url.match(/^#/)) {
    // display a note
    $("#toolbar").after($("<h1>").text(url.slice(1)).addClass("note"));
  }

  resizeIframe(); 

  timer = null;

  if (gup('timer') != "") {
    var time = parseInt(gup('timer'));
    $("#timer").text(time);
    timer = setInterval(function() { countdown(time-1); }, 1000);
  }

  $("#set-timer").click(function() { 
     var time = parseInt($("#set-time").val());
     clearInterval(timer);
     $("#timer").text(time);
     timer = setInterval(function() { countdown(time-1); }, 1000);
     return false;
  });

  $("#clear-timer").click(function() {
     clearInterval(timer);
     $("#timer").text("");
     return false;
   }); 
}

function countdown(init_time) {
  
  if ($("#timer").text() == "" || $("#timer").text() == "0") {
    $("#timer").text(init_time);
  } else {
    var oldTime = parseInt($("#timer").text());
    if (oldTime == 1) {
      $("#timer").text("0");
      alert("Time up!");
      clearInterval(timer);
    }
    $("#timer").text(oldTime - 1);
  }

  var shuffurl = $("#shuff").attr("href");
  var shufftime = $("#timer").text() == "0" ? "" : $("#timer").text();
  shuffurl = shuffurl.replace(/timer=\d*/,"timer="+shufftime);
  $("#shuff").attr("href", shuffurl);
}

var getDocHeight = function(){
    return Math.max(
        $(document).height(),
        $(window).height(),
        /* For opera: */
        document.documentElement.clientHeight
    );
};



function resizeIframe()
{
  $("#iframe").height( getDocHeight() - $("#toolbar").innerHeight() );
  $("#player").height( getDocHeight() - $("#toolbar").innerHeight() );
}

$(window).resize( function() {resizeIframe();} );

function gup( name )
{
  name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
  var regexS = "[\\?&]"+name+"=([^&#]*)";
  var regex = new RegExp( regexS );
  var results = regex.exec( window.location.href );
  if( results == null )
    return "";
  else
    return results[1];
}

getYouTubeId = function(url) {
  var urlparts = url.split('?');
  if (urlparts.length > 1) {
    var parameters = urlparts[1].split('&');
    for (var i = 0; i < parameters.length; i++) {
      var paramparts = parameters[i].split('=');
      if (paramparts.length > 1 && unescape(paramparts[0]) == "v") {
        return unescape(paramparts[1]);
      }
    }
  }
  return null;
};

function onYouTubePlayerAPIReady() {
  var videoId = getYouTubeId($("#link").text());
  player = new YT.Player('player', {
    videoId: videoId,
    playerVars: { 'autoplay': 1 },
    events: { 'onStateChange' : onPlayerStateChange }});
}

function onPlayerStateChange(event) { 
  if (event.data == YT.PlayerState.ENDED) {

    window.location.replace($("#shuff").attr("href"));
    $("#shuff").click();
  }
}

</script>
<style text="text/css">
html {overflow: hidden;} /*we don't need any scrolls for our html */
</style>

<div id="toolbar">
  <%= link_to "Shuff!", shuffle_category_links_path(@link.category, :timer => ""), :id => "shuff" %>
  | Shuff'd to: <%= link_to @link.url, @link.url, :id => "link" %>
  | Timer: <span id="timer"></span> <input type="text" id="set-time" size="2" />s <a href="#" id="set-timer">set</a> <a href="#" id="clear-timer">clear</a>
  | <span id="home"><%= link_to "Home", root_path %></span>
</div>
<div id="iframe">
  <iframe src="" />
</div>

